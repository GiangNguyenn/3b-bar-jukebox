# Cursor Rules for TypeScript, Next.js, and React Development

# Generation of new code
Always check if there is an existing utility function that can be reused before generating new code.


## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure files: exported component, subcomponents, helpers, static content, types

## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard)
- Favor named exports for components
- Use PascalCase for component files and camelCase for utility files

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use maps instead
- Use functional components with TypeScript interfaces

## Syntax and Formatting
- Use the "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements
- Use declarative JSX

## UI and Styling
- Use HeroUI and Tailwind for components and styling
- Implement responsive design with Tailwind CSS; use a mobile-first approach

## Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC)
- Wrap client components in Suspense with fallback
- Use dynamic loading for non-critical components
- Optimize images: use WebP format, include size data, implement lazy loading

## Key Conventions
- Use 'nuqs' for URL search parameter state management
- Optimize Web Vitals (LCP, CLS, FID)
- Limit 'use client':
  - Favor server components and Next.js SSR
  - Use only for Web API access in small components
  - Avoid for data fetching or state management
- Follow Next.js docs for Data Fetching, Rendering, and Routing

## Project Structure

### App Directory Organization
- Use route groups with parentheses (e.g., (auth), (dashboard)) to organize related routes
- Keep page-specific components within their respective route folders
- Maintain clear separation between public and authenticated routes
- Place error, loading, and not-found pages at appropriate levels

### Feature-based Architecture
- Organize domain-specific code in features directory:
  ```
  app/
  ├── [feature-name]/
  │   ├── components/
  │   ├── hooks/
  │   └── types/
  ```
- Keep feature-specific components, hooks, and types within their feature directory
- Use barrel exports (index.ts) for clean imports

### API and Data Layer
- Organize API routes under app/api grouped by feature
- Keep API handlers clean and focused
- Use middleware for common API functionality
- Place feature-specific services in respective feature directories

### State Management
- Place global contexts in contexts directory
- Keep feature-specific contexts within feature directories
- Prefer React Server Components where possible
- Use URL state management with nuqs for shareable state

### Asset Organization
- Keep all public assets in the root public directory
- Organize assets by type (images, icons, etc.)
- Use appropriate image formats and optimization

### Type Organization
- Place global types in types directory
- Keep feature-specific types within feature directories
- Use consistent type naming conventions
- Export types through barrel files 